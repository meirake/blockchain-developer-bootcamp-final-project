{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","emptyAddr","App","state","accounts","contract","contractAddr","hasBasket","account","myBasket","partnersBasket","myAgree","partnerAgree","componentDidMount","eth","getAccounts","net","getId","networkId","isLocal","alert","deployedNetwork","EscrowContract","networks","instance","Contract","abi","address","events","successfulDeposit","updateAll","setAgreed","updateAgreed","successfulCancel","updateHasBasket","createdBasket","setState","updateBasketContents","error","this","methods","call","from","myTokens","pTokens","viewNumberOfDepositedTokens","nrTokens","i","viewMyBasket","token","push","viewPartnerBasket","viewState","agreement","agree1","agree2","agree","send","cancel","partner","createBaskets","tokenAddr","tokenId","erc721","ERC721","approve","msg","deposit","className","onClick","pBasket","onApprove","addr","id","approveToken","onDeposit","pAgree","onAgree","onCancel","makeBaskets","Component","Actions","props","Deposit","tokenAddress","placeholder","value","type","onChange","e","target","Status","agreed","getColor","getText","ViewBaskets","basket","map","index","key","basketElements","CreateTransaction","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8854fbd1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport EscrowContract from \"./contracts/Escrow.json\";\nimport ERC721 from \"./contracts/ERC721.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\nconst emptyAddr = \"0x0000000000000000000000000000000000000000\";\nclass App extends Component {\n  state = {\n    web3: null, \n    accounts: null, \n    contract: null,\n    contractAddr: \"\",\n    hasBasket: false,\n    account: \"\",\n    myBasket: [],\n    partnersBasket: [],\n    myAgree: false,\n    partnerAgree: false\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const isRinkeby = networkId === 4;\n      const isLocal = networkId > 1000;\n      if (!isRinkeby && !isLocal) {\n        alert(\"Please switch to Rinkeby testnet.\")\n      }\n      const deployedNetwork = EscrowContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        EscrowContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // watch events\n      instance.events.successfulDeposit({}, \n        () => this.updateAll());\n      instance.events.setAgreed({}, \n        () => this.updateAgreed());\n      instance.events.successfulCancel({}, \n        () => this.updateHasBasket());\n      instance.events.createdBasket({}, \n        () => this.updateHasBasket());\n\n      this.setState({ \n        web3: web3, \n        accounts: accounts, \n        contract: instance, \n        contractAddr: deployedNetwork.address,\n        account: accounts[0] \n      });\n      await this.updateHasBasket();\n      await this.updateBasketContents();\n      await this.updateAgreed();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async updateHasBasket() {\n    const hasBasket = await this.state.contract.methods.hasBasket().call(\n      {from: this.state.account});\n    this.setState({hasBasket: hasBasket});\n  }\n\n  async updateBasketContents() {\n    await this.updateHasBasket();\n    if (!this.state.hasBasket) {\n      return;\n    }\n    let myTokens = [];\n    let pTokens = [];\n    const nrTokens = await this.state.contract.methods.viewNumberOfDepositedTokens().call({from: this.state.account});\n    for(let i = 0; i < nrTokens[0]; ++i) {\n      const token = await this.state.contract.methods.viewMyBasket(i).call({from: this.state.account});\n      myTokens.push(token);\n    }\n    for(let i = 0; i < nrTokens[1]; ++i) {\n      const token = await this.state.contract.methods.viewPartnerBasket(i).call({from: this.state.account});\n      pTokens.push(token);\n    }\n    this.setState({myBasket: myTokens, partnersBasket: pTokens});\n  }\n\n  async updateAgreed() {\n    await this.updateHasBasket();\n    if (!this.state.hasBasket) {\n      return;\n    }\n    const agreement = await this.state.contract.methods.viewState().call(\n      {from: this.state.account}\n    );\n    this.setState({\n      myAgree: agreement.agree1, \n      partnerAgree: agreement.agree2\n    });\n  }\n\n  async updateAll() {\n    await this.updateHasBasket();\n    await this.updateAgreed();\n    await this.updateBasketContents();\n  }\n\n  async onAgree() {\n    await this.updateHasBasket();\n    if (!this.state.hasBasket) {\n      return;\n    }\n    await this.state.contract.methods.agree().send(\n      {from: this.state.account}\n    );\n    console.log(\"Agreed\");\n    await this.updateAgreed();\n  }\n\n  async onCancel() {\n    await this.updateHasBasket();\n    if (!this.state.hasBasket) {\n      return;\n    }\n    await this.state.contract.methods.cancel().send(\n      {from: this.state.account}\n    );\n    console.log(\"Canceled\");\n    await this.updateHasBasket();\n  }\n\n  async makeBaskets(partner) {\n    await this.state.contract.methods.createBaskets(\n      this.state.account, partner).send({ from: this.state.account }\n    );\n    await this.updateHasBasket();\n    console.log(\"Made baskets.\")\n  }\n\n  async approveToken(tokenAddr, tokenId) {\n    await this.updateAll();\n    if (!this.state.hasBasket) {\n      return;\n    }\n    let erc721 = new this.state.web3.eth.Contract(\n      ERC721.abi,\n      tokenAddr\n    );\n    try {\n      await erc721.methods.approve(this.state.contractAddr, tokenId).send(\n        {from: this.state.account}\n      );\n    } catch (error) {\n      console.log(error);\n      const msg = (error + \n        \"\\n\\n Please make sure that: \\n\" +\n        \"- the NFT address is valid \\n\" +\n        \"- the token ID is correct \\n\" +\n        \"- you are the owner of this token \\n\");\n      alert(msg);\n    }\n  }\n\n  async deposit(tokenAddr, tokenId) {\n    // TODO: doesn't catch contract require statements properly.\n    await this.updateAll();\n    if (!this.state.hasBasket) {\n      return;\n    }\n    try {\n      await this.state.contract.methods.deposit(\n        tokenAddr, tokenId).send({from: this.state.account});\n      await this.updateBasketContents();\n    }\n    catch (error) {\n      console.log(error);\n      const msg = (error + \n        \"\\n\\n Please make sure that: \\n\" +\n        \"- the NFT address is valid \\n\" +\n        \"- the token ID is correct \\n\" +\n        \"- you are the owner of this token \\n\" +\n        \"- you approved the Escrow contract for this token\\n\");\n      alert(msg);\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    if (this.state.hasBasket) {\n      return (\n        <div className=\"App\">\n          <h1>Your open transaction</h1>\n        <button className=\"update\"\n          onClick={() => this.updateAll()}>\n          Update\n        </button>\n          <ViewBaskets \n            myBasket = {this.state.myBasket}\n            pBasket = {this.state.partnersBasket}\n          />\n          <div className=\"row\">\n            <div className=\"col\">\n              <Deposit \n                onApprove={(addr, id) => this.approveToken(addr, id)}\n                onDeposit={(addr, id) => this.deposit(addr, id)}\n              />\n            </div>\n            <div className=\"col\">\n              <Status\n                myAgree = {this.state.myAgree}\n                pAgree = {this.state.partnerAgree}\n              />\n            </div>\n            <div className=\"col\">\n              <Actions\n                onAgree={() => this.onAgree()}\n                onCancel={() => this.onCancel()}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <h1>Create a transaction</h1>\n        <CreateTransaction\n          onClick={(partner) => this.makeBaskets(partner)}\n        />\n      </div>\n    );\n  }\n}\n\nclass Actions extends Component {\n\n  render() {\n    return(\n      <div className=\"GroupActions\">\n        <h2>Actions</h2>\n        <div>\n        <button className=\"actions\"\n          onClick={() => this.props.onAgree()}>\n          Agree\n        </button>\n        </div>\n        <div>\n        <button  className=\"actions\"\n          onClick={() => this.props.onCancel()}>\n          Cancel\n        </button>\n        </div>\n\n      </div>);\n  }\n}\n\nclass Deposit extends Component {\n  state ={\n    tokenAddress: \"\",\n    tokenId: 0\n  };\n\n  render(){\n    return(\n      <div className=\"GroupDeposit\">\n        <h2>Deposit an NFT</h2>\n        <div>\n          <label className=\"deposit\"> Address: </label>\n          <input \n            className=\"deposit\"\n            placeholder = {emptyAddr}\n            value={this.state.tokenAddress}\n            type=\"text\" \n            onChange={(e)=>{this.setState({tokenAddress: e.target.value})}}\n          /> \n        </div>\n        <div>\n          <label className=\"deposit\"> ID: </label> \n          <input \n            className=\"deposit\"\n            placeholder = {emptyAddr}\n            value={this.state.tokenId}\n            type=\"number\" \n            onChange={(e)=>{this.setState({tokenId: e.target.value})}}\n          /> \n        </div>\n        <div>\n          <button className=\"deposit\"\n            onClick={() => this.props.onApprove(this.state.tokenAddress, this.state.tokenId)}>\n            Approve\n          </button>\n          <button className=\"deposit\"\n            onClick={() => this.props.onDeposit(this.state.tokenAddress, this.state.tokenId)}>\n            Deposit\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Status extends Component {\n  getColor(agreed) {\n    if (agreed) {\n      return \"green\";\n    }\n    return \"red\";\n  }\n\n  getText(agreed) {\n    if (agreed) {\n      return \"agreed.\";\n    }\n    return \"did not agree.\";\n  }\n\n  render() {\n    return(\n      <div className=\"GroupMiddle\">\n        <h2>Status</h2>\n        <p className={this.getColor(this.props.myAgree)}>\n          <b>{\"You \" + this.getText(this.props.myAgree)}</b>\n        </p>\n        <p className={this.getColor(this.props.pAgree)}>\n          <b>{\"Your partner \" + this.getText(this.props.pAgree)}</b>\n        </p>\n      </div>);\n  }\n}\n\nclass ViewBaskets extends Component {\n  basketElements(basket) {\n    const tokens = basket.map((token, index) => {\n      return (\n        <li key={index}>\n          <p>Token address:<br/>\n          {token[0]}<br/>\n          Token ID:<br/>\n          {token[1]}\n          </p>\n        </li>\n      )\n    });\n    return tokens;\n  }\n\n  render(){\n    return(\n      <div className=\"Group\">\n        <div className=\"row\">\n          <div className = \"colInside\">\n            <h2>My Basket</h2>\n            <ul className =\"basket\">\n              {this.basketElements(this.props.myBasket)}\n            </ul>\n          </div>\n          <div className = \"colInside\">\n            <h2>Partner Basket</h2>\n            <ul className =\"basket\">\n              {this.basketElements(this.props.pBasket)}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nclass CreateTransaction extends Component {\n  state = {\n    partner: \"\"\n  };\n\n  render(){\n    return(\n      <div>\n        <input className=\"address\"\n          placeholder={emptyAddr}\n          value={this.state.partner}\n          type=\"text\" \n          onChange={(e)=>{this.setState({partner: e.target.value})}}\n        /> \n        <button onClick={() => this.props.onClick(this.state.partner)}>Make baskets</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}